def _make_table(db): ...
def _set_default_query_class(d): ...
def _wrap_with_default_query_class(fn): ...
def _include_sqlalchemy(obj): ...
class _DebugQueryTuple(tuple):
    def duration(self): ...
    def __repr__(self): ...
def _calling_context(app_path): ...
class SignallingSession(SessionBase):
    def __init__(self, db, autocommit=False, autoflush=True, app=None, **options): ...
    def get_bind(self, mapper=None, clause=None): ...
class _SessionSignalEvents(object):
    def register(cls, session): ...
    def unregister(cls, session): ...
    def record_ops(session, flush_context=None, instances=None): ...
    def before_commit(session): ...
    def after_commit(session): ...
    def after_rollback(session): ...
class _EngineDebuggingSignalEvents(object):
    def __init__(self, engine, import_name): ...
    def register(self): ...
    def before_cursor_execute(self, conn, cursor, statement,
                              parameters, context, executemany): ...
    def after_cursor_execute(self, conn, cursor, statement,
                             parameters, context, executemany): ...
def get_debug_queries(): ...
class Pagination(object):
    def __init__(self, query, page, per_page, total, items): ...
    def pages(self): ...
    def prev(self, error_out=False): ...
    def prev_num(self): ...
    def has_prev(self): ...
    def next(self, error_out=False): ...
    def has_next(self): ...
    def next_num(self): ...
    def iter_pages(self, left_edge=2, left_current=2,
                   right_current=5, right_edge=2): ...
class BaseQuery(orm.Query):
    def get_or_404(self, ident): ...
    def first_or_404(self): ...
    def paginate(self, page=None, per_page=None, error_out=True): ...
class _QueryProperty(object):
    def __init__(self, sa): ...
    def __get__(self, obj, type): ...
def _record_queries(app): ...
class _EngineConnector(object):
    def __init__(self, sa, app, bind=None): ...
    def get_uri(self): ...
    def get_engine(self): ...
def _should_set_tablename(bases, d): ...
class _BoundDeclarativeMeta(DeclarativeMeta):
    def __new__(cls, name, bases, d): ...
    def __init__(self, name, bases, d): ...
def get_state(app): ...
class _SQLAlchemyState(object):
    def __init__(self, db, app): ...
class Model(object):
    def __init__(self, **kwargs): ...
class SQLAlchemy(object):
    Model = Model
    Query = BaseQuery
    def __init__(self, app=None, use_native_unicode=True, session_options=None, metadata=None): ...
    def metadata(self): ...
    def create_scoped_session(self, options=None): ...
    def create_session(self, options): ...
    def make_declarative_base(self, metadata=None): ...
    def init_app(self, app): ...
    def apply_pool_defaults(self, app, options): ...
    def apply_driver_hacks(self, app, info, options): ...
    def engine(self): ...
    def make_connector(self, app, bind=None): ...
    def get_engine(self, app, bind=None): ...
    def get_app(self, reference_app=None): ...
    def get_tables_for_bind(self, bind=None): ...
    def get_binds(self, app=None): ...
    def _execute_for_all_tables(self, app, bind, operation, skip_tables=False): ...
    def create_all(self, bind='__all__', app=None): ...
    def drop_all(self, bind='__all__', app=None): ...
    def reflect(self, bind='__all__', app=None): ...
    def __repr__(self): ...
