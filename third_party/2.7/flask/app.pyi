
from .helpers import _PackageBoundObject
from typing import Any

class Flask(_PackageBoundObject):
    def __init__(self, import_name, static_path=None, static_url_path=None,
                 static_folder='static', template_folder='templates',
                 instance_path=None, instance_relative_config=False): ...
    # Todo: add other fields
    error_handlers = ... # type: Any
    def name(self): ...
    @property
    def propagate_exceptions(self): ...
    @property
    def preserve_context_on_exception(self): ...
    @property
    def logger(self): ...
    @property
    def jinja_env(self): ...
    @property
    def got_first_request(self): ...
    def make_config(self, instance_relative=False): ...
    def auto_find_instance_path(self): ...
    def open_instance_resource(self, resource, mode='rb'): ...
    def create_jinja_environment(self): ...
    def create_global_jinja_loader(self): ...
    def init_jinja_globals(self): ...
    def select_jinja_autoescape(self, filename): ...
    def update_template_context(self, context): ...
    def run(self, host=None, port=None, debug=None, **options): ...
    def test_client(self, use_cookies=True): ...
    def open_session(self, request): ...
    def save_session(self, session, response): ...
    def make_null_session(self): ...
    def register_module(self, module, **options): ...
    def register_blueprint(self, blueprint, **options): ...
    def add_url_rule(self, rule, endpoint=None, view_func=None, **options): ...
    def route(self, rule, **options): ...
    def endpoint(self, endpoint): ...
    def errorhandler(self, code_or_exception): ...
    def register_error_handler(self, code_or_exception, f): ...
    def _register_error_handler(self, key, code_or_exception, f): ...
    def template_filter(self, name=None): ...
    def add_template_filter(self, f, name=None): ...
    def template_test(self, name=None): ...
    def add_template_test(self, f, name=None): ...
    def template_global(self, name=None): ...
    def add_template_global(self, f, name=None): ...
    def before_request(self, f): ...
    def before_first_request(self, f): ...
    def after_request(self, f): ...
    def teardown_request(self, f): ...
    def teardown_appcontext(self, f): ...
    def context_processor(self, f): ...
    def url_value_preprocessor(self, f): ...
    def url_defaults(self, f): ...
    def handle_http_exception(self, e): ...
    def trap_http_exception(self, e): ...
    def handle_user_exception(self, e): ...
    def handle_exception(self, e): ...
    def log_exception(self, exc_info): ...
    def raise_routing_exception(self, request): ...
    def dispatch_request(self): ...
    def full_dispatch_request(self): ...
    def try_trigger_before_first_request_functions(self): ...
    def make_default_options_response(self): ...
    def should_ignore_error(self, error): ...
    def make_response(self, rv): ...
    def create_url_adapter(self, request): ...
    def inject_url_defaults(self, endpoint, values): ...
    def handle_url_build_error(self, error, endpoint, values): ...
    def preprocess_request(self): ...
    def process_response(self, response): ...
    def do_teardown_request(self, exc=None): ...
    def do_teardown_appcontext(self, exc=None): ...
    def app_context(self): ...
    def request_context(self, environ): ...
    def test_request_context(self, *args, **kwargs): ...
    def wsgi_app(self, environ, start_response): ...
    def modules(self): ...
    def __call__(self, environ, start_response): ...
    def __repr__(self): ...

